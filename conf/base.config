process {
    process.executor = 'slurm'
    clusterOptions = '-p platinum -q hcp-ddp302 -A ddp302' 

    cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 5
    maxErrors     = '-1'

    withLabel:process_low {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 10.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 128.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 30.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 50.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_disk {
        cpus   = { check_max( 4    * task.attempt, 'cpus'    ) }
        memory = { check_max( 256.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 50.h  * task.attempt, 'time'    ) }
        disk   = { check_max( 100.GB * task.attempt, 'disk' ) } 
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel: extractReads {
        cpus = 4
        memory = 64.GB
        time = 8.h
    }
    withLabel: fastQC {
        cpus = 4
        memory = 64.GB
        time = 8.h
    }
    withLabel: filterReads {
        cpus = 4
        memory = 128.GB
        time = 10.h
    }
    withLabel: mapReads {
        cpus   = { check_max( 4    * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 50.h  * task.attempt, 'time'    ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
